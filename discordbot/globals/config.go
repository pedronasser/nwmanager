package globals

import (
	"context"
	"fmt"
	"log"
	"nwmanager/types"

	"github.com/bwmarrin/discordgo"
)

const (
	SEPARATOR = "„Éª"
)

var (
	EVERYONE_ROLE_NAME      = "@everyone"
	MEMBER_ROLE_NAME        = "üë•„ÉªMembro"
	ADMIN_ROLE_NAME         = "üëë Governador"
	CONSUL_ROLE_NAME        = "üíéConsul"
	OFFICER_ROLE_NAME       = "üèÜOficial"
	OPR_ROLE_NAME           = "‚öîÔ∏è„ÉªOPR"
	RAID_DEVOUR_ROLE        = "ü™±„ÉªDevorador"
	RAID_GORGON_ROLE        = "üóø„ÉªGorgonas"
	BRUISER_ROLE_NAME       = "ü™ì„ÉªBruiser"
	MAGE_ROLE_NAME          = "üßô„ÉªMago"
	ASSASSIN_ROLE_NAME      = "üòà„ÉªAssassino"
	ARCO_MOSQUETE_ROLE_NAME = "üèπ„ÉªArco/Mosquete"
	DISRUPTOR_ROLE_NAME     = "üëª„ÉªDisruptor"
	HEALER_ROLE_NAME        = "üöë„ÉªHealer"
	DEBUFFER_ROLE_NAME      = "üè¥„ÉªDebuffer"
	TANK_ROLE_NAME          = "üî∞„ÉªTank"
	ARCHIVE_CATEGORY        = "üìö„ÉªArquivo"
	RECRUIT_ROLE_NAME       = "üå±„ÉªRecruta"
)

var ACCESS_ROLE_IDS = map[string]string{
	EVERYONE_ROLE_NAME: "",
	MEMBER_ROLE_NAME:   "",
	ADMIN_ROLE_NAME:    "",
	CONSUL_ROLE_NAME:   "",
	OFFICER_ROLE_NAME:  "",
}

var CLASS_ROLE_IDS = map[string]string{
	BRUISER_ROLE_NAME:       "",
	MAGE_ROLE_NAME:          "",
	ASSASSIN_ROLE_NAME:      "",
	HEALER_ROLE_NAME:        "",
	DEBUFFER_ROLE_NAME:      "",
	TANK_ROLE_NAME:          "",
	DISRUPTOR_ROLE_NAME:     "",
	ARCO_MOSQUETE_ROLE_NAME: "",
	RECRUIT_ROLE_NAME:       "",
}

var CLASS_CATEGORY_IDS = map[string]string{
	BRUISER_ROLE_NAME:       "",
	MAGE_ROLE_NAME:          "",
	ASSASSIN_ROLE_NAME:      "",
	HEALER_ROLE_NAME:        "",
	DEBUFFER_ROLE_NAME:      "",
	TANK_ROLE_NAME:          "",
	DISRUPTOR_ROLE_NAME:     "",
	ARCO_MOSQUETE_ROLE_NAME: "",
	RECRUIT_ROLE_NAME:       "",
	ARCHIVE_CATEGORY:        "",
}

var BUILD_LEADER_ROLE_NAMES = map[string]string{
	BRUISER_ROLE_NAME:       "„ÉªBL Bruiser",
	MAGE_ROLE_NAME:          "„ÉªBL Mago",
	ASSASSIN_ROLE_NAME:      "„ÉªBL Assassino",
	HEALER_ROLE_NAME:        "„ÉªBL Healer",
	DEBUFFER_ROLE_NAME:      "„ÉªBL Debuffer",
	TANK_ROLE_NAME:          "„ÉªBL Tank",
	DISRUPTOR_ROLE_NAME:     "„ÉªBL Disruptor",
	ARCO_MOSQUETE_ROLE_NAME: "„ÉªBL Arco/Mosquete",
}

var CLASS_LEADER_ROLE_IDS = map[string]string{
	BRUISER_ROLE_NAME:       "",
	MAGE_ROLE_NAME:          "",
	ASSASSIN_ROLE_NAME:      "",
	HEALER_ROLE_NAME:        "",
	DEBUFFER_ROLE_NAME:      "",
	TANK_ROLE_NAME:          "",
	DISRUPTOR_ROLE_NAME:     "",
	ARCO_MOSQUETE_ROLE_NAME: "",
}

func Setup(ctx context.Context, dg *discordgo.Session, AppID, GuildID *string, db types.Database) {
	fmt.Println("Loading globals")
	guild, err := dg.State.Guild(*GuildID)
	if err != nil {
		log.Fatalf("Cannot get guild: %v", err)
	}

	for roleName := range ACCESS_ROLE_IDS {
		role := GetRoleByName(guild, roleName)
		if role == nil {
			continue
		}
		ACCESS_ROLE_IDS[roleName] = role.ID
		fmt.Printf("Found Access Role %s: %s\n", roleName, role.ID)
	}

	for roleName := range CLASS_ROLE_IDS {
		role := GetRoleByName(guild, roleName)
		if role == nil {
			continue
		}
		CLASS_ROLE_IDS[roleName] = role.ID
		fmt.Printf("Found Class Role %s: %s\n", roleName, role.ID)
	}

	for roleName := range BUILD_LEADER_ROLE_NAMES {
		role := GetRoleByName(guild, BUILD_LEADER_ROLE_NAMES[roleName])
		if role == nil {
			continue
		}
		CLASS_LEADER_ROLE_IDS[roleName] = role.ID
		fmt.Printf("Found Build Leader Role %s: %s\n", roleName, role.ID)
	}

	channels, err := dg.GuildChannels(*GuildID)
	if err != nil {
		log.Fatalf("Cannot get guild channels: %v", err)
	}

	for roleName := range CLASS_CATEGORY_IDS {
		for _, channel := range channels {
			if channel.Name == roleName {
				CLASS_CATEGORY_IDS[roleName] = channel.ID
				fmt.Printf("Found Class Category %s: %s\n", roleName, channel.ID)
				break
			}
		}
	}
}

var knownRoles = map[string]discordgo.Role{}

func GetRoleByName(guild *discordgo.Guild, roleName string) *discordgo.Role {
	if role, ok := knownRoles[roleName]; ok {
		return &role
	}
	for _, role := range guild.Roles {
		if role.Name == roleName {
			knownRoles[roleName] = *role
			return role
		}
	}

	return nil
}
